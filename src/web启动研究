部署在web容器，web容器会提供一个全局上下文，叫做servletContext，为spring IOC提供宿主，然后触发contextLoader的contextInitialized方法，
这里面会初始化一个根上下文即WebApplicattion，
即调用this.contextLoader.initWebApplicationContext(event.getServletContext());
然后这个方法里面又会调用configureAndRefreshWebApplicationContext(err, servletContext);而这个方法命名为配置并刷新WebApplicationContext
这个里面会拿到以contextConfigLocation命名的的配置文件，而这个配置是在web.xml中context—param中value就是第一个总XML配置，
然后还会拿到服务器的环境信息等等，装配进ConfigurableWebApplicationContext中去，然后调用他的refresh方法，工程里面的bean便在这个finishBeanFactoryInitialization方法中开始装填，
最后完成之后就是spring的IOC容器，然后以WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE为Key存到servletContext中，便于获取。
contextLoaderListener初始化完毕之后，然后开始初始化web.xml中配置的servlet，最常见的就是DispatcherServlet，这个servlet实际上是一个标准的前端控制器，
用以转发、匹配、处理每个servlet请求。DispatcherServlet上下文在初始化的时候会建立自己的IoC上下文，用以持有spring mvc相关的bean。
在建立DispatcherServlet自己的IoC上下文时，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE先从ServletContext中获取之前的根上下文(即WebApplicationContext)作为自己上下文的parent上下文。有了这个parent上下文之后，
再初始化自己持有的上下文。这个DispatcherServlet初始化自己上下文的工作在其initStrategies方法中可以看到，大概的工作就是初始化处理器映射、视图解析等。这个servlet自己持有的上下文默认实现类也是mlWebApplicationContext。初始化完毕后，
spring以与servlet的名字相关(此处不是简单的以servlet名为Key，而是通过一些转换，具体可自行查看源码)的属性为属性Key，也将其存到ServletContext中，以便后续使用。这样每个servlet就持有自己的上下文，即拥有自己独立的bean空间，
同时各个servlet共享相同的bean，即根上下文(第2步中初始化的上下文)定义的那些bean。